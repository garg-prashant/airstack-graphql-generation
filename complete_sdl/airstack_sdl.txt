directive @binding(
  constraint: String!
  errorCode: String!
) on INPUT_FIELD_DEFINITION | ARGUMENT_DEFINITION

directive @db(
  collectionFieldName: String!
  startPrefix: String
  endPrefix: String
  isStartExclusive: String
  isEndExclusive: String
) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION

input String_Comparator_Exp {
  _eq: String
    @binding(constraint: "required,min=1", errorCode: "INVALID_STRING")
  _gt: String
    @binding(constraint: "required,min=1", errorCode: "INVALID_STRING")
  _gte: String
    @binding(constraint: "required,min=1", errorCode: "INVALID_STRING")
  _lt: String
    @binding(constraint: "required,min=1", errorCode: "INVALID_STRING")
  _lte: String
    @binding(constraint: "required,min=1", errorCode: "INVALID_STRING")
  _ne: String
    @binding(constraint: "required,min=1", errorCode: "INVALID_STRING")
  _in: [String!]
    @binding(constraint: "required,min=1", errorCode: "INVALID_STRING_ARRAY")
  _nin: [String!]
    @binding(constraint: "required,min=1", errorCode: "INVALID_STRING_ARRAY")
}

input Regex_String_Comparator_Exp {
  _eq: String
    @binding(constraint: "required,min=1", errorCode: "INVALID_STRING")
  _gt: String
    @binding(constraint: "required,min=1", errorCode: "INVALID_STRING")
  _gte: String
    @binding(constraint: "required,min=1", errorCode: "INVALID_STRING")
  _lt: String
    @binding(constraint: "required,min=1", errorCode: "INVALID_STRING")
  _lte: String
    @binding(constraint: "required,min=1", errorCode: "INVALID_STRING")
  _ne: String
    @binding(constraint: "required,min=1", errorCode: "INVALID_STRING")
  _regex: String
    @binding(constraint: "required,min=1", errorCode: "INVALID_STRING")
  _in: [String!]
    @binding(constraint: "required,min=1", errorCode: "INVALID_STRING_ARRAY")
  _nin: [String!]
    @binding(constraint: "required,min=1", errorCode: "INVALID_STRING_ARRAY")
}

input Int_String_Comparator_Exp {
  _eq: String
    @binding(constraint: "required,min=1", errorCode: "INVALID_STRING")
  _gt: String
    @binding(constraint: "required,min=1", errorCode: "INVALID_STRING")
  _gte: String
    @binding(constraint: "required,min=1", errorCode: "INVALID_STRING")
  _lt: String
    @binding(constraint: "required,min=1", errorCode: "INVALID_STRING")
  _lte: String
    @binding(constraint: "required,min=1", errorCode: "INVALID_STRING")
  _ne: String
    @binding(constraint: "required,min=1", errorCode: "INVALID_STRING")
  _in: [String!]
    @binding(constraint: "required,min=1", errorCode: "INVALID_STRING_ARRAY")
  _nin: [String!]
    @binding(constraint: "required,min=1", errorCode: "INVALID_STRING_ARRAY")
}

input Int_Comparator_Exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _lt: Int
  _lte: Int
  _ne: Int
  _in: [Int!]
    @binding(constraint: "required,min=1", errorCode: "INVALID_INT_ARRAY")
  _nin: [Int!]
    @binding(constraint: "required,min=1", errorCode: "INVALID_INT_ARRAY")
}

scalar Address

input Address_Comparator_Exp {
  _eq: Address
    @binding(constraint: "required,min=1", errorCode: "INVALID_ADDRESS")
  _ne: Address
    @binding(constraint: "required,min=1", errorCode: "INVALID_ADDRESS")
  _in: [Address!]
    @binding(constraint: "required,min=1", errorCode: "INVALID_ADDRESS_ARRAY")
  _nin: [Address!]
    @binding(constraint: "required,min=1", errorCode: "INVALID_ADDRESS_ARRAY")
}

scalar Identity

input Identity_Comparator_Exp {
  _eq: Identity
    @binding(constraint: "required,min=3", errorCode: "INVALID_IDENTITY")
  _in: [Identity!]
    @binding(constraint: "required,min=1", errorCode: "INVALID_IDENTITY_ARRAY")
}

input Boolean_Comparator_Exp {
  _eq: Boolean
}

input TokenType_Comparator_Exp {
  _eq: TokenType
    @binding(constraint: "required", errorCode: "INVALID_TOKEN_TYPE")
  _in: [TokenType!]
    @binding(
      constraint: "required,min=1"
      errorCode: "INVALID_TOKEN_TYPE_ARRAY"
    )
}

input DomainDappName_Comparator_Exp {
  _eq: DomainDappName
    @binding(constraint: "required", errorCode: "INVALID_DOMAIN_DAPP_NAME")
  _in: [DomainDappName!]
    @binding(
      constraint: "required,min=1"
      errorCode: "INVALID_DOMAIN_DAPP_NAME_ARRAY"
    )
}

input DomainDappSlug_Comparator_Exp {
  _eq: DomainDappSlug
    @binding(constraint: "required", errorCode: "INVALID_DOMAIN_DAPP_SLUG")
  _in: [DomainDappSlug!]
    @binding(
      constraint: "required,min=1"
      errorCode: "INVALID_DOMAIN_DAPP_SLUG_ARRAY"
    )
}

input SocialDappName_Comparator_Exp {
  _eq: SocialDappName
    @binding(constraint: "required", errorCode: "INVALID_SOCIAL_DAPP_NAME")
  _in: [SocialDappName!]
    @binding(
      constraint: "required,min=1"
      errorCode: "INVALID_SOCIAL_DAPP_NAME_ARRAY"
    )
}

input SocialDappSlug_Comparator_Exp {
  _eq: SocialDappSlug
    @binding(constraint: "required", errorCode: "INVALID_SOCIAL_DAPP_SLUG")
  _in: [SocialDappSlug!]
    @binding(
      constraint: "required,min=1"
      errorCode: "INVALID_SOCIAL_DAPP_SLUG_ARRAY"
    )
}

input PoapDappName_Comparator_Exp {
  _eq: PoapDappName
    @binding(constraint: "required", errorCode: "INVALID_POAP_DAPP_NAME")
  _in: [PoapDappName!]
    @binding(
      constraint: "required,min=1"
      errorCode: "INVALID_POAP_DAPP_NAME_ARRAY"
    )
}

input PoapDappSlug_Comparator_Exp {
  _eq: PoapDappSlug
    @binding(constraint: "required", errorCode: "INVALID_POAP_DAPP_SLUG")
  _in: [PoapDappSlug!]
    @binding(
      constraint: "required,min=1"
      errorCode: "INVALID_POAP_DAPP_SLUG_ARRAY"
    )
}

input AccountStandard_Comparator_Exp {
  _eq: AccountStandard
    @binding(constraint: "required", errorCode: "INVALID_ACCOUNT_STANDARD")
  _in: [AccountStandard!]
    @binding(
      constraint: "required,min=1"
      errorCode: "INVALID_ACCOUNT_STANDARD_ARRAY"
    )
}

scalar Time

input Time_Comparator_Exp {
  _eq: Time
  _gt: Time
  _gte: Time
  _lt: Time
  _lte: Time
  _ne: Time
  _in: [Time!]
    @binding(constraint: "required,min=1", errorCode: "INVALID_TIME_ARRAY")
  _nin: [Time!]
    @binding(constraint: "required,min=1", errorCode: "INVALID_TIME_ARRAY")
}

input Float_Comparator_Exp {
  _eq: Float
  _gt: Float
  _gte: Float
  _lt: Float
  _lte: Float
  _ne: Float
  _in: [Float!]
    @binding(constraint: "required,min=1", errorCode: "INVALID_FLOAT_ARRAY")
  _nin: [Float!]
    @binding(constraint: "required,min=1", errorCode: "INVALID_FLOAT_ARRAY")
}

scalar Range

input Range_Comparator_Exp {
  _eq: Int @binding(constraint: "required,min=1", errorCode: "INVALID_NUMBER")
}

scalar TimeRange

input Time_Range_Comparator_Exp {
  _eq: Int
    @binding(constraint: "required,min=1", errorCode: "INVALID_TIMESTAMP")
}

scalar DateRange

input Date_Range_Comparator_Exp {
  _eq: String @binding(constraint: "required,min=1", errorCode: "INVALID_DATE")
}

enum OrderBy {
  ASC
  DESC
}

enum OrderByAsIntString {
  ASC
  DESC
}

enum TokenType {
  ERC1155
  ERC721
  ERC20
}

enum DomainDappName {
  ens
}

enum DomainDappSlug {
  ens_v1
}

enum SocialDappName {
  farcaster
  lens
}

enum SocialDappSlug {
  farcaster_optimism
  farcaster_goerli
  lens_polygon
  farcaster_v2_optimism
  lens_v2_polygon
}

enum PoapDappName {
  poap
}

enum PoapDappSlug {
  poap_mainnet
  poap_gnosis
}

enum AccountStandard {
  ERC6551
}

type PageInfo {
  prevCursor: String!
  nextCursor: String!
  hasPrevPage: Boolean!
  hasNextPage: Boolean!
}

scalar Map

scalar IntString

enum TokenBlockchain {
  ethereum
  polygon
  base
}

enum SnapshotBlockchain {
  ethereum
  base
}

enum Blockchain {
  ethereum
}

enum EveryBlockchain {
  ALL
}

type Media {
  image: ImageSizes
  video: VideoVariants
  audio: AudioVariants
  json: String
  animation_url: AnimationUrlVariants
}

type ImageSizes {
  extraSmall: String
  small: String
  medium: String
  large: String
  original: String
}

type VideoVariants {
  original: String
}

type AudioVariants {
  original: String
}

type AnimationUrlVariants {
  original: String
}

type LogoSizes {
  small: String
  medium: String
  large: String
  original: String
  external: String
}

type ContractMetadata {
  """
  Name of the token, mirrored from the smart contract
  """
  name: String
  """
  Description of the token, mirrored from the smart contract
  """
  description: String
  image: String
  externalLink: String
  sellerFeeBasisPoints: Int
  """
  Royalties recipient address, mirrored from the smart contract
  """
  feeRecipient: String
}

type Token {
  """
  Airstack unique identifier for the contract
  """
  id: ID
  """
  Smart contract address of the token
  """
  address: Address!
  """
  Unique identifier for the blockchain
  """
  chainId: String
  """
  Blockchain where the token smart contract is deployed
  """
  blockchain: TokenBlockchain
  """
  Name of the token, mirrored from the smart contract
  """
  name: String
  """
  Symbol of the token, mirrored from the smart contract
  """
  symbol: String
  """
  The owner of the token contract
  """
  owner: Wallet
  """
  Token type: ERC20, ERC721, or ERC1155
  """
  type: TokenType
  """
  Amount of tokens in the protocol
  """
  totalSupply: String
  """
  The number of decimal places this token uses, default to 18
  """
  decimals: Int
  """
  Logo image for the contract in various sizes (if available)
  """
  logo: LogoSizes
  """
  URI for the token's contract metadata
  """
  contractMetaDataURI: String
  """
  Token contract metadata object
  """
  contractMetaData: ContractMetadata
  """
  Token contract metadata as it appears inside the contract
  """
  rawContractMetaData: Map
  """
  Base URI of the token contract
  """
  baseURI: String
  """
  Timestamp of the token's most recent transfer
  """
  lastTransferTimestamp: Time
  """
  Block number of the token's most recent transfer
  """
  lastTransferBlock: Int
  """
  Transaction hash of the token's most recent transfer
  """
  lastTransferHash: String
  """
  Returns count of all NFT token attribute types and values for the given smart contract
  """
  tokenTraits: Map
  """
  Nested Query - allows querying the tokenBalance information
  """
  tokenBalances(input: TokenBalancesNestedInput): [TokenBalance!]
  """
  Nested Query - allows querying the tokenNFTs information
  """
  tokenNfts(input: TokenNftsNestedInput): [TokenNft!]
  """
  off-chain data for the token project
  """
  projectDetails: ProjectDetails
  """
  Indicates if the token is set to be spam - true or false
  """
  isSpam: Boolean
}

type Wallet {
  """
  Blockchain address, ENS domain name, social identity such as Farcaster (for Farcaster use 'fc_fid:' prefix followed by the Farcaster user ID like fc_fid:5650, or use 'fc_fname:' prefix followed by the Farcaster user ID like 'fc_fname:vbuterin') or Lens (e.g. 'stani.lens)
  """
  identity: Identity!
  """
  Blockchain associated with the provided identity
  """
  blockchain: TokenBlockchain
  """
  Returns addresses associated with the identity input
  """
  addresses: [Address!]
  """
  Nested query - allows returning primary domains, if applicable
  """
  primaryDomain: Domain
  """
  Nested query - allows querying domains owned by the address
  """
  domains(input: DomainsNestedInput): [Domain!]
  """
  Returns social profile information related to the address
  """
  socials(input: SocialsNestedInput): [Social!]
  """
  Nested query - allows returning token transfers and related information
  """
  tokenTransfers(input: TokenTransfersNestedInput): [TokenTransfer!]
  """
  Nested query - allows returning token balances
  """
  tokenBalances(input: TokenBalancesNestedInput): [TokenBalance!]
  """
  Returns Poaps owned by the address
  """
  poaps(input: PoapsNestedInput): [Poap!]
  """
  Nested query - allows querying the XMTP enabled addresses
  """
  xmtp(input: XMTPsNestedInput): [XMTP!]

  """
  Represent On-chain smart-contract accounts
  """
  accounts(input: AccountsNestedInput): [Account!]
  socialFollowings(input: SocialFollowingNestedInput): SocialFollowingOutput
  socialFollowers(input: SocialFollowerNestedInput): SocialFollowerOutput
}

type Domain {
  """
  Airstack unique identifier for the data point
  """
  id: ID
  """
  Parent domain name, if the entity is a subdomain
  """
  parent: String
  """
  Nested query - domain owner related information, including address, domains, social profile, other token balances, and transfer history
  """
  owner: Address!
  """
  Nested query - on-chain owner wallet related information, including address, domains, social profile, other token balances, and transfer history
  """
  ownerDetails: Wallet
  """
  Nested query - on-chain resolvedAddress wallet related information, including address, domains, social profile, other token balances, and transfer history
  """
  resolvedAddressDetails: Wallet
  """
  Blockchain address to which the domain is resolved
  """
  resolvedAddress: Address
  """
  Resolver address associated with Domain
  """
  resolverAddress: Address
  """
  Timestamp when the domain registration expires
  """
  expiryTimestamp: Time
  """
  Indicates if the domain is set to be primary - true or false
  """
  isPrimary: Boolean
  """
  Domain name without the domain ending, e.g. vitalik instead of vitalik.eth
  """
  labelName: String
  """
  Airstack unique domain hash
  """
  labelHash: String
  """
  Full domain name, e.g. vitalik.eth
  """
  name: String
  """
  Nested query - can retrieve payment token data (name, symbol, etc.)
  """
  paymentToken: Token
  """
  payment amount in blockchain native token for the domain
  """
  paymentTokenCostInNativeToken: Float
  """
  payment amount in USDC for the domain
  """
  paymentTokenCostInUSDC: Float
  """
  Domain registration cost
  """
  registrationCost: String
  """
  Domain registration cost in blockchain native token
  """
  registrationCostInNativeToken: String
  """
  Domain registration cost in USDC
  """
  registrationCostInUSDC: String
  """
  Domain registration cost in decimals
  """
  formattedRegistrationCost: Float
  """
  Domain registration cost in native blockchain token in decimals
  """
  formattedRegistrationCostInNativeToken: Float
  """
  Domain registration cost in USDC in decimals
  """
  formattedRegistrationCostInUSDC: Float
  """
  Nested query allowing to retrieve subdomain information associated with the domain
  """
  subDomains(input: DomainsNestedInput): [Domain]
  """
  Count of subdomains linked to the domain
  """
  subDomainCount: Int
  """
  Domain Token ID associated with the domain, if applicable
  """
  tokenId: String
  """
  Time-to-live value for the domain
  """
  ttl: String
  """
  Unique identifier for the blockchain
  """
  chainId: String
  """
  Blockchain where the NFT sale took place
  """
  blockchain: Blockchain!
  """
  DApp name associated with the domain (e.g. ENS)
  """
  dappName: DomainDappName
  """
  DApp slug (contract version) associated with the domain
  """
  dappSlug: DomainDappSlug
  """
  Block number when the domain was created
  """
  createdAtBlockNumber: Int
  """
  Timestamp when the domain was created
  """
  createdAtBlockTimestamp: Time
  """
  Block number when the domain was last updated
  """
  lastUpdatedBlockNumber: Int
  """
  Timestamp when the domain was last updated
  """
  lastUpdatedBlockTimestamp: Time
  tokenAddress: Address!
  """
  Token nft associated with the domain, if applicable
  """
  tokenNft: TokenNft
}

type Social {
  """
  Airstack unique identifier for the data point
  """
  id: ID
  """
  Unique identifier for the blockchain
  """
  chainId: String
  """
  Blockchain associated with the social identity
  """
  blockchain: Blockchain
  """
  Social DApp name
  """
  dappName: SocialDappName
  """
  Social DApp slug (contract version)
  """
  dappSlug: SocialDappSlug
  """
  Airstack unique dapp version number
  """
  dappVersion: String
  userId: String
  userAddress: Address
  userAddressDetails: Wallet
  userAssociatedAddressDetails: [Wallet!]
  tokenNft: TokenNft
  userCreatedAtBlockTimestamp: Time
  userCreatedAtBlockNumber: Int
  userLastUpdatedAtBlockTimestamp: Time
  userLastUpdatedAtBlockNumber: Int
  userHomeURL: String
  userRecoveryAddress: Address
  """
  blockchain addresses associated with the social profile
  """
  userAssociatedAddresses: [Address!]
  profileName: String
  profileTokenId: String
  profileTokenIdHex: String
  profileTokenAddress: String
  profileCreatedAtBlockTimestamp: Time
  profileCreatedAtBlockNumber: Int
  profileLastUpdatedAtBlockTimestamp: Time
  profileLastUpdatedAtBlockNumber: Int
  profileTokenUri: String
  isDefault: Boolean
  """
  Blockchain address, ENS domain name, social identity such as Farcaster (for Farcaster use 'fc_fid:' prefix followed by the Farcaster user ID like fc_fid:5650, or use 'fc_fname:' prefix followed by the Farcaster user ID like 'fc_fname:vbuterin') or Lens (e.g. 'stani.lens)
  """
  identity: Identity
  followerTokenAddress: Address
  followingCount: Int
  followerCount: Int
  followings(input: SocialFollowingNestedInput): SocialFollowingOutput
  followers(input: SocialFollowerNestedInput): SocialFollowerOutput
  profileBio: String
  profileDisplayName: String
  profileImage: String
  profileUrl: String
  fnames: [String]
  handleTokenAddress: Address
  handleTokenId: String
  metadataURI: String
  profileMetadata: Map
  coverImageURI: String
  twitterUserName: String
  website: String
  location: String
  profileImageContentValue: Media
  coverImageContentValue: Media
  profileHandle: String
  profileHandleNft: TokenNft
}

type SocialFollowingOutput {
  pageInfo: PageInfo
  Following: [SocialFollowing!]
}

type SocialFollowerOutput {
  pageInfo: PageInfo
  Follower: [SocialFollower!]
}

type SocialFollower {
  id: ID
  blockchain: EveryBlockchain
  dappName: String
  dappSlug: String
  followingProfileId: String
  followingAddress: Wallet
  followerProfileId: String
  followerAddress: Wallet
  followerTokenId: String
  blockNumber: Int
  followerSince: Time
}

type SocialFollowing {
  id: ID
  blockchain: EveryBlockchain
  dappName: String
  dappSlug: String
  followingProfileId: String
  followingAddress: Wallet
  followerProfileId: String
  followerAddress: Wallet
  followerTokenId: String
  blockNumber: Int
  followingSince: Time
}

input SocialFollowingNestedInput {
  order: [SocialFollowingOrderBy]
  filter: SocialFollowingFilter
  blockchain: EveryBlockchain
  limit: Int @binding(constraint: "min=1,max=200", errorCode: "INVALID_LIMIT")
}

input SocialFollowerNestedInput {
  order: [SocialFollowerOrderBy]
  filter: SocialFollowerFilter
  blockchain: EveryBlockchain
  limit: Int @binding(constraint: "min=1,max=200", errorCode: "INVALID_LIMIT")
}

input SocialFollowingInput {
  order: [SocialFollowingOrderBy!]
  filter: SocialFollowingFilter!
  blockchain: EveryBlockchain!
  limit: Int @binding(constraint: "min=1,max=200", errorCode: "INVALID_LIMIT")
  cursor: String
}

input SocialFollowerInput {
  order: [SocialFollowerOrderBy!]
  filter: SocialFollowerFilter!
  blockchain: EveryBlockchain!
  limit: Int @binding(constraint: "min=1,max=200", errorCode: "INVALID_LIMIT")
  cursor: String
}

input SocialFollowingFilter {
  _and: [SocialFollowingFilter!]
  _or: [SocialFollowingFilter!]
  _nor: [SocialFollowingFilter!]
  dappName: SocialDappName_Comparator_Exp
  dappSlug: SocialDappSlug_Comparator_Exp
  identity: Identity_Comparator_Exp
    @db(collectionFieldName: "followerProfileId")
  followingSince: Time_Comparator_Exp
    @db(collectionFieldName: "activityTimestamp")
  blockNumber: Int_Comparator_Exp @db(collectionFieldName: "blockNumber")
  followingProfileId: String_Comparator_Exp
  followerProfileId: String_Comparator_Exp
}

input SocialFollowerFilter {
  _and: [SocialFollowerFilter!]
  _or: [SocialFollowerFilter!]
  _nor: [SocialFollowerFilter!]
  dappName: SocialDappName_Comparator_Exp
  dappSlug: SocialDappSlug_Comparator_Exp
  identity: Identity_Comparator_Exp
    @db(collectionFieldName: "followingProfileId")
  followerSince: Time_Comparator_Exp
    @db(collectionFieldName: "activityTimestamp")
  blockNumber: Int_Comparator_Exp @db(collectionFieldName: "blockNumber")
  followerProfileId: String_Comparator_Exp
  followingProfileId: String_Comparator_Exp
}

input SocialFollowerOrderBy {
  blockNumber: OrderBy
  followerSince: OrderBy @db(collectionFieldName: "activityTimestamp")
}

input SocialFollowingOrderBy {
  blockNumber: OrderBy
  followingSince: OrderBy @db(collectionFieldName: "activityTimestamp")
}

type TokenTransfer {
  """
  Airstack unique identifier for the data point
  """
  id: ID
  """
  Unique identifier for the blockchain
  """
  chainId: String
  """
  Blockchain where the token transfer took place
  """
  blockchain: TokenBlockchain
  """
  Nested query - sender wallet related information, including address, domains, social profile, other token balances, and transfer history
  """
  from: Wallet
  """
  Nested query - recipient wallet related information, including address, domains, social profile, other token balances, and transfer history
  """
  to: Wallet
  """
  Type of the token transfer
  """
  type: String
  """
  Transferred token smart contract address
  """
  tokenAddress: Address
  """
  Nested query - operator wallet (if the transaction was facilitated via smart contract) related information, including address, domains, social profile, other token balances, and transfer history
  """
  operator: Wallet
  """
  Token amount in the transfer
  """
  amount: String
  """
  Formatted transfer amount in decimals
  """
  formattedAmount: Float
  """
  Unique NFT token ID
  """
  tokenId: String
  """
  Token amounts in the transfer, if applicable. This mostly occurs in ERC1155 batch transfers
  """
  amounts: [String!]
  """
  Unique NFT token IDs if multiple NFTs were a part of the transfer
  """
  tokenIds: [String!]
  """
  Token type: ERC20, ERC721, or ERC1155
  """
  tokenType: TokenType
  """
  Token transfer transction hash
  """
  transactionHash: String!
  """
  Block timestamp of the token transfer
  """
  blockTimestamp: Time
  """
  Block number of the token transfer
  """
  blockNumber: Int
  """
  Nested Query - allows retrieving token Token NFT level data, such as images, traits, and so on for each unique NFT in the transfer
  """
  tokenNft: TokenNft
  """
  Nested Query - allows retrieving token contract level data
  """
  token: Token
}

type TokenNft {
  """
  Airstack unique identifier for the NFT token
  """
  id: ID!
  """
  Smart contract address of the token
  """
  address: Address!
  """
  Unique NFT token ID
  """
  tokenId: String!
  """
  Blockchain where the token smart contract is deployed
  """
  blockchain: TokenBlockchain
  """
  Unique identifier for the blockchain
  """
  chainId: String!
  """
  NFT Token type: ERC721, or ERC1155
  """
  type: TokenType
  """
  Amount of NFT tokens in the protocol
  """
  totalSupply: String
  """
  NFT token URI
  """
  tokenURI: String
  """
  Content type of the NFT token (image, video, audio, etc.)
  """
  contentType: String
  """
  NFT Media - resized images, animation, videos, etc.
  """
  contentValue: Media
  """
  NFT token metadata and attributes
  """
  metaData: NftMetadata
  """
  NFT token metadata, mirrored from the smart contract
  """
  rawMetaData: Map
  """
  Transaction hash of the NFT token most recent transfer
  """
  lastTransferHash: String
  """
  Block number of the NFT token most recent transfer
  """
  lastTransferBlock: Int
  """
  Timestamp of the NFT token most recent transfer
  """
  lastTransferTimestamp: Time
  """
  Nested Query - allows retrieving token contract level data
  """
  token: Token
  """
  Nested Query - allows querying the tokenBalance information
  """
  tokenBalances(input: TokenBalancesNestedInput): [TokenBalance!]
  """
  Nested Query - allows querying the tokenTransfer information
  """
  tokenTransfers(input: TokenTransfersNestedInput): [TokenTransfer!]
  """
  Nested Query - allows querying the erc6551 account
  """
  erc6551Accounts(input: AccountsNestedInput): [Account!]
}

type NftMetadata {
  """
  Name of the token, mirrored from the smart contract
  """
  name: String
  """
  Description of the token, mirrored from the smart contract
  """
  description: String
  """
  Link to the token image, mirrored from the smart contract
  """
  image: String
  attributes: [NftAttribute!]
  imageData: String
  backgroundColor: String
  youtubeUrl: String
  externalUrl: String
  animationUrl: String
}

type NftAttribute {
  """
  NFT attribute type as defined in the smart contract, e.g. background
  """
  trait_type: String
  """
  NFT attribute value as defined in the smart contract, e.g. blue
  """
  value: String
  displayType: String
  maxValue: String
}

type TokenBalance {
  """
  Airstack unique identifier for the data point
  """
  id: ID!
  """
  Unique identifier for the blockchain
  """
  chainId: String!
  """
  Blockchain where the token smart contract is deployed
  """
  blockchain: TokenBlockchain
  """
  Smart contract address of the token
  """
  tokenAddress: Address!
  """
  Unique NFT token ID
  """
  tokenId: String
  """
  Nested Query allowing to retrieve address, domain names, social profiles of the owner
  """
  owner: Wallet!
  """
  Token amount the address currently holds
  """
  amount: String!
  """
  Formatted token balance in decimals
  """
  formattedAmount: Float
  """
  Block number of the latest token balance change happened
  """
  lastUpdatedBlock: Int!
  """
  Timestamp of the latest token balance change happened
  """
  lastUpdatedTimestamp: Time
  """
  Token type: ERC20, ERC721, or ERC1155
  """
  tokenType: TokenType
  """
  Nested Query - allows retrieving token contract level data
  """
  token: Token
  """
  Nested Query - allows retrieving token NFT contract level data, such as images, traits, and so on
  """
  tokenNfts: TokenNft
  """
  Nested Query - allows retrieving token transfer history
  """
  tokenTransfers(input: TokenTransfersNestedInput): [TokenTransfer!]
}

"""
Represents on-chain smart contract account
"""
type Account {
  """
  Airstack unique identifier for the account
  """
  id: ID!
  """
  Standard of account-  ERC6551, Safe etc
  """
  standard: AccountStandard!
  """
  Blockchain where account is created
  """
  blockchain: TokenBlockchain
  """
  ERC6551 standard: Address of ERC721 token
  """
  tokenAddress: Address
  """
  ERC6551 standard: tokenId of ERC721 token
  """
  tokenId: String
  """
  Nested query - on-chain wallet related information, including address, domains, social profile, other token balances, and transfer history
  """
  address: Wallet!
  """
  ERC6551 standard : Registry used to deploy smart contract wallet
  """
  registry: String
  """
  ERC6551 standard : Implementation address of on chain smart contract account
  """
  implementation: String
  """
  ERC6551 standard salt for account creation
  """
  salt: String
  """
  Block number of the account creation transaction
  """
  createdAtBlockNumber: Int
  """
  Block timestamp of the account creation transaction
  """
  createdAtBlockTimestamp: Time
  """
  Transaction Hash of the account creation transaction
  """
  creationTransactionHash: String
  """
  Address of deployer
  """
  deployer: String
  """
  Token NFT associated with erc-6551
  """
  nft: TokenNft
  """
  Block number of the account updation transaction
  """
  updatedAtBlockNumber: Int
  """
  Block timestamp of the account updation transaction
  """
  updatedAtBlockTimestamp: Time
}

type Poap {
  """
  Airstack unique identifier for the data point
  """
  id: ID
  """
  Unique identifier for the blockchain
  """
  chainId: String
  """
  Blockchain associated with the Poap
  """
  blockchain: EveryBlockchain
  """
  Poap DApp name
  """
  dappName: PoapDappName
  """
  Poap DApp slug (contract version)
  """
  dappSlug: PoapDappSlug
  """
  Airstack unique dapp version number
  """
  dappVersion: String
  """
  Poap event id
  """
  eventId: String
  owner: Wallet!
  """
  Time when POAP was created
  """
  createdAtBlockTimestamp: Time
  """
  Block Number when POAP was created
  """
  createdAtBlockNumber: Int
  tokenId: String
  tokenUri: String
  """
  POAP Contract Address
  """
  tokenAddress: String
  transferCount: Int
  mintOrder: Int
  mintHash: String
  poapEvent: PoapEvent
  attendee: PoapAttendee
}

type PoapEvent {
  """
  Airstack unique identifier for the data point
  """
  id: ID!
  """
  Unique identifier for the blockchain
  """
  chainId: String
  """
  Blockchain where the marketplace data is calculated from
  """
  blockchain: EveryBlockchain
  dappName: PoapDappName
  dappSlug: PoapDappSlug!
  dappVersion: String
  eventId: String
  tokenMints: Int
  metadata: Map
  contentType: String
  contentValue: Media
  eventName: String
  description: String
  country: String
  city: String
  startDate: Time
  endDate: Time
  """
  If Event is Virtual or not
  """
  isVirtualEvent: Boolean
  """
  The Event URL
  """
  eventURL: String
  poaps(input: PoapsNestedInput): [Poap!]
}

type PoapAttendee {
  totalPoapOwned: Int
  owner: Wallet!
}

type XMTP {
  """
  Airstack unique identifier for the data point
  """
  id: ID
  blockchain: EveryBlockchain
  owner: Wallet
  isXMTPEnabled: Boolean
}

type ProjectDetails {
  collectionName: String
  description: String
  externalUrl: String
  twitterUrl: String
  discordUrl: String
  imageUrl: String
}

type Snapshot {
  """
  Airstack unique identifier for the data point
  """
  id: ID!
  owner: Wallet!
  tokenAddress: Address!
  amount: String
  formattedAmount: Float
  tokenType: TokenType
  blockchain: TokenBlockchain
  startBlockTimestamp: Time
  endBlockTimestamp: Time
  startBlockNumber: Int
  endBlockNumber: Int
  tokenNft: TokenNft
  token: Token
  chainId: String
  tokenId: String
}

input TokenOrderBy {
  name: OrderBy
  symbol: OrderBy
  type: OrderBy
}

input TokenFilter {
  _and: [TokenFilter!]
  _or: [TokenFilter!]
  _nor: [TokenFilter!]
  address: Address_Comparator_Exp
  name: String_Comparator_Exp
  symbol: String_Comparator_Exp
  owner: Identity_Comparator_Exp
  type: TokenType_Comparator_Exp
  isSpam: Boolean_Comparator_Exp
}

input TokenInput {
  address: Address!
  blockchain: TokenBlockchain!
}

input TokensInput {
  order: [TokenOrderBy!]
  filter: TokenFilter!
  blockchain: TokenBlockchain!
  limit: Int @binding(constraint: "min=1,max=200", errorCode: "INVALID_LIMIT")
  cursor: String
}

type TokensOutput {
  Token: [Token!]
  pageInfo: PageInfo
}

input NftAttributeFilter {
  _and: [NftAttributeFilter!]
  _or: [NftAttributeFilter!]
  _nor: [NftAttributeFilter!]
  trait_type: String_Comparator_Exp
  value: String_Comparator_Exp
}

input NftAttributesInput {
  filter: NftAttributeFilter!
  limit: Int @binding(constraint: "min=1,max=200", errorCode: "INVALID_LIMIT")
  cursor: String
}

type NftAttributesOutput {
  NftAttribute: [NftAttribute!]
  pageInfo: PageInfo
}

input NftMetadataOrderBy {
  attributes: OrderBy
}

input NftMetadataFilter {
  _and: [NftMetadataFilter!]
  _or: [NftMetadataFilter!]
  _nor: [NftMetadataFilter!]
  name: String_Comparator_Exp
  attributes: NftAttributeFilter
}

input NftMetadatasInput {
  order: [NftMetadataOrderBy!]
  filter: NftMetadataFilter!
  limit: Int @binding(constraint: "min=1,max=200", errorCode: "INVALID_LIMIT")
  cursor: String
}

type NftMetadatasOutput {
  NftMetadata: [NftMetadata!]
  pageInfo: PageInfo
}

input TokenNftOrderBy {
  tokenId: OrderBy
}

input TokenNftFilter {
  _and: [TokenNftFilter!]
  _or: [TokenNftFilter!]
  _nor: [TokenNftFilter!]
  address: Address_Comparator_Exp
  tokenId: String_Comparator_Exp
  metaData: NftMetadataFilter
}

input TokenNftInput {
  address: Address!
  tokenId: String!
  blockchain: TokenBlockchain!
}

input TokenNftsInput {
  order: [TokenNftOrderBy!]
  filter: TokenNftFilter!
  blockchain: TokenBlockchain!
  limit: Int @binding(constraint: "min=1,max=200", errorCode: "INVALID_LIMIT")
  cursor: String
}

type TokenNftsOutput {
  TokenNft: [TokenNft!]
  pageInfo: PageInfo
}

input TokenBalanceOrderBy {
  lastUpdatedTimestamp: OrderBy
}

input TokenBalanceFilter {
  _and: [TokenBalanceFilter!]
  _or: [TokenBalanceFilter!]
  _nor: [TokenBalanceFilter!]
  tokenAddress: Address_Comparator_Exp
  tokenId: String_Comparator_Exp
  owner: Identity_Comparator_Exp
  formattedAmount: Float_Comparator_Exp
  lastUpdatedTimestamp: Time_Comparator_Exp
  tokenType: TokenType_Comparator_Exp
}

input TokenBalancesInput {
  order: [TokenBalanceOrderBy!]
  filter: TokenBalanceFilter!
  blockchain: TokenBlockchain!
  limit: Int @binding(constraint: "min=1,max=200", errorCode: "INVALID_LIMIT")
  cursor: String
}

type TokenBalancesOutput {
  TokenBalance: [TokenBalance!]
  pageInfo: PageInfo
}

input TokenTransferOrderBy {
  blockTimestamp: OrderBy
}

input TokenTransferFilter {
  _and: [TokenTransferFilter!]
  _or: [TokenTransferFilter!]
  _nor: [TokenTransferFilter!]
  from: Identity_Comparator_Exp
  to: Identity_Comparator_Exp
  tokenAddress: Address_Comparator_Exp
  operator: Identity_Comparator_Exp
  formattedAmount: Float_Comparator_Exp
  tokenId: String_Comparator_Exp
  tokenType: TokenType_Comparator_Exp
  transactionHash: String_Comparator_Exp
  blockTimestamp: Time_Comparator_Exp
}

input TokenTransferInput {
  blockchain: TokenBlockchain!
  transactionHash: String!
}

input TokenTransfersInput {
  order: [TokenTransferOrderBy!]
  filter: TokenTransferFilter!
  blockchain: TokenBlockchain!
  limit: Int @binding(constraint: "min=1,max=200", errorCode: "INVALID_LIMIT")
  cursor: String
}

type TokenTransfersOutput {
  TokenTransfer: [TokenTransfer!]
  pageInfo: PageInfo
}

input DomainOrderBy {
  expiryTimestamp: OrderBy
  createdAtBlockTimestamp: OrderBy
  lastUpdatedBlockTimestamp: OrderBy
}

input DomainFilter {
  _and: [DomainFilter!]
  _or: [DomainFilter!]
  _nor: [DomainFilter!]
  parent: String_Comparator_Exp
  owner: Identity_Comparator_Exp
  resolvedAddress: Address_Comparator_Exp
  isPrimary: Boolean_Comparator_Exp
  name: String_Comparator_Exp
}

input DomainInput {
  resolvedAddress: Address
  name: String
  blockchain: Blockchain!
}

input DomainsInput {
  order: [DomainOrderBy!]
  filter: DomainFilter!
  blockchain: Blockchain!
  limit: Int @binding(constraint: "min=1,max=200", errorCode: "INVALID_LIMIT")
  cursor: String
}

type DomainsOutput {
  Domain: [Domain!]
  pageInfo: PageInfo
}

input WalletInput {
  identity: Identity!
  blockchain: TokenBlockchain!
}

input SocialOrderBy {
  profileCreatedAtBlockTimestamp: OrderBy
  followerCount: OrderBy
  followingCount: OrderBy
}

input SocialFilter {
  _and: [SocialFilter!]
  _or: [SocialFilter!]
  _nor: [SocialFilter!]
  dappName: SocialDappName_Comparator_Exp
  dappSlug: SocialDappSlug_Comparator_Exp
  userId: String_Comparator_Exp
  userAssociatedAddresses: Address_Comparator_Exp
  profileName: String_Comparator_Exp
  profileCreatedAtBlockTimestamp: Time_Comparator_Exp
  isDefault: Boolean_Comparator_Exp
  identity: Identity_Comparator_Exp
    @db(collectionFieldName: "userAssociatedAddresses")
  followerCount: Int_Comparator_Exp
  followingCount: Int_Comparator_Exp
}

input SocialsInput {
  order: [SocialOrderBy!]
  filter: SocialFilter!
  blockchain: Blockchain!
  limit: Int @binding(constraint: "min=1,max=200", errorCode: "INVALID_LIMIT")
  cursor: String
}

type SocialsOutput {
  Social: [Social!]
  pageInfo: PageInfo
}

input PoapEventOrderBy {
  tokenMints: OrderBy
  startDate: OrderBy
  endDate: OrderBy
}

input PoapEventFilter {
  _and: [PoapEventFilter!]
  _or: [PoapEventFilter!]
  _nor: [PoapEventFilter!]
  dappName: PoapDappName_Comparator_Exp
  dappSlug: PoapDappSlug_Comparator_Exp
  eventId: String_Comparator_Exp
  tokenMints: Int_Comparator_Exp
  eventName: Regex_String_Comparator_Exp
  country: String_Comparator_Exp
  city: String_Comparator_Exp
  startDate: String_Comparator_Exp
  endDate: String_Comparator_Exp
  isVirtualEvent: Boolean_Comparator_Exp
}

input PoapEventsInput {
  order: [PoapEventOrderBy!]
  filter: PoapEventFilter!
  blockchain: EveryBlockchain!
  limit: Int @binding(constraint: "min=1,max=200", errorCode: "INVALID_LIMIT")
  cursor: String
}

type PoapEventsOutput {
  PoapEvent: [PoapEvent!]
  pageInfo: PageInfo
}

input PoapOrderBy {
  createdAtBlockNumber: OrderBy
}

input PoapFilter {
  _and: [PoapFilter!]
  _or: [PoapFilter!]
  _nor: [PoapFilter!]
  dappName: PoapDappName_Comparator_Exp
  dappSlug: PoapDappSlug_Comparator_Exp
  eventId: String_Comparator_Exp
  owner: Identity_Comparator_Exp @db(collectionFieldName: "ownerAddress")
  createdAtBlockNumber: Int_Comparator_Exp
  tokenId: String_Comparator_Exp
}

input PoapsInput {
  order: [PoapOrderBy!]
  filter: PoapFilter!
  blockchain: EveryBlockchain!
  limit: Int @binding(constraint: "min=1,max=200", errorCode: "INVALID_LIMIT")
  cursor: String
}

type PoapsOutput {
  Poap: [Poap!]
  pageInfo: PageInfo
}

# input PoapAttendeesInput {
#   limit: Int
#   cursor: String
# }

type PoapAttendeesOutput {
  PoapAttendee: [PoapAttendee!]
  pageInfo: PageInfo
}

input AccountOrderBy {
  createdAtBlockTimestamp: OrderBy
}

input AccountFilter {
  _and: [AccountFilter!]
  _or: [AccountFilter!]
  _nor: [AccountFilter!]
  standard: AccountStandard_Comparator_Exp
  tokenAddress: Address_Comparator_Exp
  tokenId: String_Comparator_Exp
  address: Identity_Comparator_Exp
  createdAtBlockTimestamp: Time_Comparator_Exp
}

input AccountsInput {
  order: [AccountOrderBy!]
  filter: AccountFilter
  blockchain: TokenBlockchain!
  limit: Int @binding(constraint: "min=1,max=200", errorCode: "INVALID_LIMIT")
  cursor: String
}

type AccountsOutput {
  Account: [Account!]
  pageInfo: PageInfo
}

input XMTPFilter {
  _and: [XMTPFilter!]
  _or: [XMTPFilter!]
  _nor: [XMTPFilter!]
  owner: Identity_Comparator_Exp
}

input XMTPsInput {
  blockchain: EveryBlockchain!
  filter: XMTPFilter!
  limit: Int @binding(constraint: "min=1,max=200", errorCode: "INVALID_LIMIT")
  cursor: String
}

type XMTPsOutput {
  XMTP: [XMTP!]
  pageInfo: PageInfo
}

input SnapshotFilter {
  _and: [SnapshotFilter!]
  _or: [SnapshotFilter!]
  _nor: [SnapshotFilter!]
  owner: Identity_Comparator_Exp
  tokenId: String_Comparator_Exp
  tokenAddress: Address_Comparator_Exp
  tokenType: TokenType_Comparator_Exp
  date: Date_Range_Comparator_Exp
    @db(
      collectionFieldName: "BlockTimestamp"
      startPrefix: "start"
      endPrefix: "end"
      isEndExclusive: "true"
    )
  timestamp: Time_Range_Comparator_Exp
    @db(
      collectionFieldName: "BlockTimestamp"
      startPrefix: "start"
      endPrefix: "end"
      isEndExclusive: "true"
    )
  blockNumber: Range_Comparator_Exp
    @db(
      collectionFieldName: "BlockNumber"
      startPrefix: "start"
      endPrefix: "end"
      isEndExclusive: "true"
    )
}

input SnapshotsInput {
  filter: SnapshotFilter!
  blockchain: SnapshotBlockchain!
  limit: Int @binding(constraint: "min=1,max=200", errorCode: "INVALID_LIMIT")
  cursor: String
}

type SnapshotsOutput {
  Snapshot: [Snapshot!]
  pageInfo: PageInfo
}

type Query {
  Token(input: TokenInput!): Token
  Tokens(input: TokensInput!): TokensOutput
  TokenNft(input: TokenNftInput!): TokenNft
  TokenNfts(input: TokenNftsInput!): TokenNftsOutput
  TokenBalances(input: TokenBalancesInput!): TokenBalancesOutput
  TokenTransfer(input: TokenTransferInput!): TokenTransfer
  TokenTransfers(input: TokenTransfersInput!): TokenTransfersOutput
  Domain(input: DomainInput!): Domain
  Domains(input: DomainsInput!): DomainsOutput
  Wallet(input: WalletInput!): Wallet
  Socials(input: SocialsInput!): SocialsOutput
  PoapEvents(input: PoapEventsInput!): PoapEventsOutput
  Poaps(input: PoapsInput!): PoapsOutput
  Accounts(input: AccountsInput!): AccountsOutput
  XMTPs(input: XMTPsInput!): XMTPsOutput
  SocialFollowings(input: SocialFollowingInput!): SocialFollowingOutput
  SocialFollowers(input: SocialFollowerInput!): SocialFollowerOutput
  Snapshots(input: SnapshotsInput!): SnapshotsOutput
}

input TokenBalancesNestedInput {
  order: [TokenBalanceOrderBy]
  filter: TokenBalanceFilter
  blockchain: TokenBlockchain
  limit: Int @binding(constraint: "min=1,max=200", errorCode: "INVALID_LIMIT")
}

input TokenNftsNestedInput {
  order: [TokenNftOrderBy]
  filter: TokenNftFilter
  blockchain: TokenBlockchain
  limit: Int @binding(constraint: "min=1,max=200", errorCode: "INVALID_LIMIT")
}

input TokenTransfersNestedInput {
  order: [TokenTransferOrderBy]
  filter: TokenTransferFilter
  blockchain: TokenBlockchain
  limit: Int @binding(constraint: "min=1,max=200", errorCode: "INVALID_LIMIT")
}

input DomainsNestedInput {
  order: [DomainOrderBy]
  filter: DomainFilter
  blockchain: Blockchain
  limit: Int @binding(constraint: "min=1,max=200", errorCode: "INVALID_LIMIT")
}

input SocialsNestedInput {
  filter: SocialFilter
  blockchain: Blockchain
  limit: Int @binding(constraint: "min=1,max=200", errorCode: "INVALID_LIMIT")
}

input PoapsNestedInput {
  order: [PoapOrderBy]
  filter: PoapFilter
  blockchain: EveryBlockchain
  limit: Int @binding(constraint: "min=1,max=200", errorCode: "INVALID_LIMIT")
}

input AccountsNestedInput {
  order: [AccountOrderBy]
  filter: AccountFilter
  blockchain: Blockchain
  limit: Int @binding(constraint: "min=1,max=200", errorCode: "INVALID_LIMIT")
}

input XMTPsNestedInput {
  blockchain: EveryBlockchain
  filter: XMTPFilter
  limit: Int @binding(constraint: "min=1,max=200", errorCode: "INVALID_LIMIT")
}